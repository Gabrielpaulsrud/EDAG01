        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/* Test program for EDAG01 Efficient C at Lund University
        -:    2: * 
        -:    3: * See intopt.h, add your implementation in intopt.c, and type make.
        -:    4: *
        -:    5: * The input in test will be run until there is a timeout or a failed test.
        -:    6: *
        -:    7: */
        -:    8:
        -:    9:#include <ctype.h>
        -:   10:#include <errno.h>
        -:   11:#include <inttypes.h>
        -:   12:#include <math.h>
        -:   13:#include <signal.h>
        -:   14:#include <stdbool.h>
        -:   15:#include <stdint.h>
        -:   16:#include <stdio.h>
        -:   17:#include <string.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <dirent.h>
        -:   20:#include <unistd.h>
        -:   21:
        -:   22:#include "error.h"
        -:   23:#include "intopt.h"
        -:   24:
        -:   25:#define N			(20)		/* max m and n. */
        -:   26:
        -:   27:char			cwd[BUFSIZ];		/* dir where we started in main. */
        -:   28:uint64_t		pass[N+1];		/* pass[i] = passed cases for m = n = i. */
        -:   29:bool			fail;			/* stopped due to failed case. */
        -:   30:char*			progname;		/* name of this program. */
        -:   31:unsigned		test_time = 120;	/* default 120 s. */
        -:   32:static const double	eps = 1e-6;		/* epsilon. */
        -:   33:
        -:   34:static void make_score();
        -:   35:
    #####:   36:static void timeout(int s)
        -:   37:{
    #####:   38:	make_score();
    #####:   39:}
        -:   40:
    #####:   41:static void cd(char* dir)
        -:   42:{
    #####:   43:	if (chdir(dir) < 0)
    #####:   44:		error("cd to \"%s\" failed", dir);
    #####:   45:}
        -:   46:
    #####:   47:static void check(void)
        -:   48:{
        -:   49:	int		r;
        -:   50:	int		m;
        -:   51:	int		n;
        -:   52:	int		i;
        -:   53:	int		j;
        -:   54:	int		k;
        -:   55:	int		s;
        -:   56:	double**	a;
        -:   57:	double*		b;
        -:   58:	double*		c;
        -:   59:	double*		x;
        -:   60:	double		z;
        -:   61:	double		y;
        -:   62:	double		z_sol;
        -:   63:	FILE*		in;
        -:   64:	FILE*		sol;
        -:   65:	
    #####:   66:	in = fopen("i", "r");
    #####:   67:	if (in == NULL)
    #####:   68:		return;
        -:   69:
    #####:   70:	r = fscanf(in, "%d", &m);
    #####:   71:	r = fscanf(in, "%d", &n);
        -:   72:
    #####:   73:	a = calloc(m+n, sizeof(double*));
    #####:   74:	b = calloc(m+n, sizeof(double));
    #####:   75:	c = calloc(n+1, sizeof(double));
    #####:   76:	x = calloc(n+m+1, sizeof(double));
        -:   77:
    #####:   78:	for (i = 0; i < n; i += 1)
    #####:   79:		r = fscanf(in, "%lf", &c[i]);
        -:   80:
    #####:   81:	for (i = 0; i < m; i += 1) {
    #####:   82:		a[i] = calloc(n+1, sizeof(double));
    #####:   83:		for (j = 0; j < n; j += 1)
    #####:   84:			r = fscanf(in, "%lf", &a[i][j]);
        -:   85:	}
        -:   86:
    #####:   87:	for (; i < n+m; i += 1)
    #####:   88:		a[i] = calloc(n+1, sizeof(double));
        -:   89:
    #####:   90:	for (i = 0; i < m; i += 1)
    #####:   91:		r = fscanf(in, "%lf", &b[i]);
        -:   92:	
    #####:   93:	fclose(in);
        -:   94:
    #####:   95:	z = intopt(m, n, a, b, c, x);
        -:   96:	
    #####:   97:	sol = fopen("intopt.sol", "r");
        -:   98:
    #####:   99:	if (sol == NULL)
    #####:  100:		goto dealloc;
        -:  101:
    #####:  102:	s = fscanf(sol, "z = %lf", &z_sol);
        -:  103:
    #####:  104:	fclose(sol);
    #####:  105:	printf("Expected %f, got %f\n", z_sol, z);
    #####:  106:	if (s != 1)
    #####:  107:		goto dealloc;
        -:  108:
    #####:  109:	if ((isfinite(z) == 0) ^ (isfinite(z_sol) == 0)) {
    #####:  110:		fail = 1;
    #####:  111:		make_score();
    #####:  112:	} else if ((isnan(z) != 0) & (isnan(z_sol) != 0))
    #####:  113:		pass[n] += 1;
    #####:  114:	else if (fabs(z-z_sol) <= eps)
    #####:  115:		pass[n] += 1;
        -:  116:	else {
    #####:  117:		fail = 1;
    #####:  118:		make_score();
        -:  119:	}
        -:  120:	
    #####:  121:dealloc:
    #####:  122:	for (i = 0; i < n+m; i += 1)
    #####:  123:		free(a[i]);
    #####:  124:	free(a);
    #####:  125:	free(b);
    #####:  126:	free(c);
    #####:  127:	free(x);
        -:  128:}
        -:  129:
    #####:  130:static void search(void)
        -:  131:{
        -:  132:	DIR*		dir;
        -:  133:	struct dirent*	entry;
        -:  134:	char		wd[BUFSIZ];
        -:  135:
    #####:  136:	dir = opendir(".");
        -:  137:
    #####:  138:	if (dir == NULL)
    #####:  139:		error("cannot open .");
        -:  140:
    #####:  141:	while ((entry = readdir(dir)) != NULL) {
        -:  142:
    #####:  143:		if (getcwd(wd, sizeof wd) == NULL)
    #####:  144:			error("getcwd failed");
    #####:  145:		if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
    #####:  146:			continue;
    #####:  147:		else if (strcmp(entry->d_name, "i") == 0)
    #####:  148:			check();
    #####:  149:		else if (isdigit(entry->d_name[0])) {
    #####:  150:			cd(entry->d_name);
    #####:  151:			search();
        -:  152:		}
        -:  153:	}
    #####:  154:	cd("..");
        -:  155:
    #####:  156:	closedir(dir);
    #####:  157:}
        -:  158:
    #####:  159:static void eval(int n)
        -:  160:{
        -:  161:	char		dir[10];
        -:  162:
    #####:  163:	sprintf(dir, "%d", n);
        -:  164:	
    #####:  165:	cd(dir);
    #####:  166:	search();
    #####:  167:}
        -:  168:
    #####:  169:static void make_score()
        -:  170:{
        -:  171:	uint64_t	i;
        -:  172:	uint64_t	d;
        -:  173:	uint64_t	s;
        -:  174:	FILE*		fp;
        -:  175:	char		dir[BUFSIZ];
        -:  176:
    #####:  177:	if (fail) {
    #####:  178:		getcwd(dir, sizeof dir);
    #####:  179:		printf("failed in %s\n", dir);
        -:  180:	}
        -:  181:
    #####:  182:	s = 0;
        -:  183:
    #####:  184:	printf("\n--- make score -------------------------\n");
        -:  185:
    #####:  186:	for (i = 2; i <= N; i += 1) {
    #####:  187:		d = pass[i] << i;
    #####:  188:		s += d;
    #####:  189:		printf("n = %2" PRIu64 ", pass = %8" PRIu64 " value = %8" PRIu64 "\n", i, pass[i], d);
        -:  190:	}
        -:  191:
    #####:  192:	printf("score = %" PRIu64 " for t = %u s\n", s, test_time);
        -:  193:
    #####:  194:	cd(cwd);
        -:  195:
    #####:  196:	fp = fopen("score", "w");
    #####:  197:	if (fp == NULL)
    #####:  198:		error("cannot open score for writing");
    #####:  199:	fprintf(fp, "%" PRIu64 "\n", s);
    #####:  200:	fclose(fp);
        -:  201:
    #####:  202:	exit(0);
        -:  203:}
        -:  204:
    #####:  205:static void usage()
        -:  206:{
    #####:  207:	fprintf(stderr, "%s: usage: %s [-t seconds]\n", progname, progname);
    #####:  208:	exit(1);
        -:  209:}
        -:  210:
    #####:  211:int main(int argc, char** argv)
        -:  212:{
        -:  213:	int		i;
        -:  214:
    #####:  215:	progname	= argv[0];
        -:  216:
    #####:  217:	signal(SIGALRM, timeout);
        -:  218:
    #####:  219:	if (getcwd(cwd, sizeof cwd) == NULL)
    #####:  220:		error("getcwd failed");
        -:  221:
    #####:  222:	for (i = 1; i < argc; i += 1) {
    #####:  223:		switch (argv[i][1]) {
    #####:  224:		case 't':
    #####:  225:			if (argv[i+1] == NULL || sscanf(argv[i+1],  "%u", &test_time) != 1)
    #####:  226:				usage();
    #####:  227:			i += 1;
    #####:  228:			break;
        -:  229:
    #####:  230:		default:
    #####:  231:			usage();
        -:  232:		}
        -:  233:	}
        -:  234:					
    #####:  235:	alarm(test_time);
        -:  236:
    #####:  237:	cd("test");
        -:  238:
    #####:  239:	for (i = 2; i <= N; i += 1)
    #####:  240:		eval(i);
        -:  241:
    #####:  242:	make_score();
        -:  243:
    #####:  244:	return 0;
        -:  245:}
